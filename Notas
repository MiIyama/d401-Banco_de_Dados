ARGS(*args)
reconhece todos argumentos da funcao como uma lista

KWARGS (**kwargs)
cria um dicionario usando o mesmo modelo de args

class Pessoa():
    def __init__(self, nome, idade): 
        self.nome = nome
        self.idade = idade

        #__init__ele forca a passar esses parametros sempre q instanciar um objeto
        # self a propria classe?

jorge = Pessoa("jorge",10)

jorge
<__main...

jorge.nome
"jorge"

jorge.idade
10


class Pessoa():
    def __init__(self, nome, idade): 
        self.nome = nome
        self.idade = idade
    def __str__(self):
        return "nome: " + self.nome + " - idade: " + self.idade


********************************************************************************************************
class Pessoa():
    def __init__(self, nome, idade): 
        self.nome = nome
        self.idade = idade

    def quemSouEu(self):
        return "Ser ou não ser o(a)" + self.nome 

class Pedreiro(Pessoa#?)
Heranca herda tudo da pessoa 
*********************************************************************************************************
class Pessoa():
    def __init__(self, nome, idade): 
        self.nome = nome
        self.idade = idade

    def quemSouEu(self):
        return "Ser ou não ser o(a)" + self.nome 

    def _dormir(self): _exemplo -> privado #convencao q mostra q programador não pode usar essa funçao é uma funcao interna de algo(classe) privado
        return "ZZZZZZZZZZZZZZZ"
*********************************************************************************************************
class MatematicaLigera()


@staticmethod
_encapsulamento

********************************************************************************************************
BANCO DE DADOS

    Modelo relacional: tudo é conectado 
        SQL lite todo banco de dados em  um arquivo ja é usado automaticamente no Django em um arquivo db.squile??? colocar ele no git ignore

        Tipos de relacionamento             
        OneToOne - um pra um
        OneToMany - um pra muitos
        ManyToOne - muitos para um
        ManyToMany - muitos para muitos



********************************************************************************************************
arquivo models.py

Criando um modelo de postagem para o nosso blog
No arquivo blog/models.py definimos todos os objetos chamados Modelos -- este é um lugar em que vamos definir nossa postagem do blog.

Vamos abrir blog/models.py no editor de código, apagar tudo dele e escrever o seguinte código:

blog/models.py
from django.conf import settings
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title
Certifique-se de que usou dois caracteres de sublinhado (_) em cada lado de str. Esta convenção é utilizada frequentemente em Python e, muitas vezes, a chamamos de "dunder" (vem da expressão em inglês "double-underscore" - sublinhado duplo em português).

Parece assustador, né? Mas não se preocupe, vamos explicar o que essas linhas significam!

Todas as linhas começando com from ou import são linhas que adicionam pedaços de outros arquivos. Então ao invés de copiar e colar as mesmas coisas em cada arquivo, podemos incluir algumas partes com from... import ....

class Post(models.Model): - esta linha define o nosso modelo (é um objeto).

class é uma palavra-chave especial que indica que estamos definindo um objeto.
Post é o nome do nosso modelo. Nós podemos dar um nome diferente (mas precisamos evitar caracteres especiais e espaços em branco). Sempre inicie o nome de uma classe com uma letra em maiúsculo.
models.Model significa que o Post é um modelo de Django, então o Django sabe que ele deve ser salvo no banco de dados.
Agora definiremos as propriedades comentadas acima: title, text, created_date, published_date e author. Para fazer isso, é necessário definir um tipo para cada campo (É um texto? Um número? Uma data? Uma relação com outro objeto, por exemplo, um usuário?)

models.CharField - é assim que definimos um texto com um número limitado de caracteres.
models.TextField - este campo é para textos sem um limite fixo. Parece ideal para o conteúdo de um blog, né?
models.DateTimeField - este é uma data e hora.
models.ForeignKey - este é um link para outro modelo.




